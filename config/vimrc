execute pathogen#infect()
syntax on
filetype plugin indent on

set t_Co=256
let g:solarized_termcolors=256
set background=dark
colorscheme solarized

set backupdir=~/.vim/dirs/backups
set directory=~/.vim/dirs/swaps

" map <Leader>rt :!ctags --tag-relative --extra=+f -Rf.git/tags --exclude=.git,pkg --languages=-javascript,sql<CR><CR>
" set tags+=.git/tags

" Explicit about Space Errors
let ruby_space_errors = 1
let c_space_errors = 1

" Auto save files on window blur
autocmd! FocusLost * :silent! up

au! FileType make set noexpandtab

" Set file types
au! BufRead,BufNewFile {Gemfile,Rakefile,Thorfile,config.ru} set ft=ruby
au! BufRead,BufNewFile gitconfig                             set ft=gitconfig

" Visual
  set ruler
  set number
  set relativenumber
  set colorcolumn=81
  set scrolloff=2
  set showmatch                 " Briefly jump to a paren once it's balanced
  set linespace=2
  set showcmd                   " Display incomplete commands

" Tabs/Whitespace
  set tabstop=2
  set shiftwidth=2
  set autoindent
  set smarttab
  set expandtab
  set nowrap
  "set list
  "set listchars=tab:▸\ ,eol:¬,trail:·
  set backspace=indent,eol,start " allow backspacing over everything in insert mode
  "set invlist

" Misc
  set shell=bash
  set nocompatible
  set history=50
  "set paste
  "set switchbuf=useopen         " Don't re-open already opened buffers
  "set nostartofline             " Avoid moving cursor to BOL when jumping around
  "set virtualedit=all           " Let cursor move past the last char
  "set whichwrap=b,s,h,l,<,>,[,]
  "let mapleader = ','
  "set autoread                  " watch for file changes
  "set mouse=a
  "set fileformats=unix

" Bells
  "set novisualbell  " No blinking
  "set noerrorbells  " No noise.
  "set vb t_vb=      " disable any beeps or flashes on error

" Searching
  "set hlsearch
  set incsearch
  "set ignorecase
  "set smartcase

" Tab completion
  "set wildmode=list:longest,list:full
  "set wildignore+=*.o,*.obj,.git,*.rbc,*.swp

" Status bar
  set laststatus=2
  "set statusline=%<%f\ %h%m%r%{fugitive#statusline()}%=%-14.(%l,%c%V%)\ %P
  "set statusline=%<%f\ %h%m%r%%=%-14.(%l,%c%V%)\ %P

" Folding
  "set foldenable                                   " Turn on folding
  "set foldmethod=marker                            " Fold on the marker
  "set foldlevel=100                                " Don't autofold anything (but I can still fold manually)
  "set foldopen=block,hor,mark,percent,quickfix,tag " what movements open folds

" Nicer text navigation
  "nmap j gj
  "nmap k gk

" Shut up about ex mode
  "noremap Q <NOP>

" Reselect visual block after adjusting indentation
  "vnoremap < <gv
  "vnoremap > >gv

" Nicer splitting
  "set splitbelow
  "set splitright
  "map <C-_> :split<CR>
  "map <C-\> :vsplit<CR>

" Move around in insert mode
  "inoremap <C-h> <left>
  "inoremap <C-k> <up>
  "inoremap <C-j> <down>
  "inoremap <C-l> <right>

" way better...
  "map 0 ^

" Opens an edit command with the path of the currently edited file filled in Normal mode: <Leader>e
  "map <Leader>e :e <C-R>=expand("%:p:h") . "/" <CR>

" Strip trailing whitespace on save
  function! <SID>StripTrailingWhitespaces()
    " Preparation: save last search, and cursor position.
    let _s=@/
    let l = line(".")
    let c = col(".")
    " Do the business:
    %s/\s\+$//e
    " Clean up: restore previous search history, and cursor position
    let @/=_s
    call cursor(l, c)
  endfunction
  autocmd! BufWritePre * :call <SID>StripTrailingWhitespaces()
